import { QRCapacitiesType } from "@/types/qrCapacities-type";
import { getQREncodeMode } from "./getQREncodeMode";
import { ErrorCorrectionType } from "@/types/errorCorrection-type";

//L = 1
//M = 0
//Q = 3
//H = 2
const QRCapacities: QRCapacitiesType[] = [
  { version: 1, capacities: { 1: [41, 25, 17], 0: [34, 20, 14], 3: [27, 16, 11], 2: [17, 10, 7] } },
  { version: 2, capacities: { 1: [77, 47, 32], 0: [63, 38, 26], 3: [48, 29, 20], 2: [34, 20, 14] } },
  { version: 3, capacities: { 1: [127, 77, 53], 0: [101, 61, 42], 3: [77, 47, 32], 2: [58, 35, 24] } },
  { version: 4, capacities: { 1: [187, 114, 78], 0: [149, 90, 62], 3: [111, 67, 46], 2: [82, 50, 34] } },
  { version: 5, capacities: { 1: [255, 154, 106], 0: [202, 122, 84], 3: [144, 87, 60], 2: [106, 64, 44] } },
  { version: 6, capacities: { 1: [322, 195, 134], 0: [255, 154, 106], 3: [178, 108, 74], 2: [139, 84, 58] } },
  { version: 7, capacities: { 1: [370, 224, 154], 0: [293, 178, 122], 3: [207, 125, 86], 2: [154, 93, 64] } },
  { version: 8, capacities: { 1: [461, 279, 192], 0: [365, 221, 152], 3: [259, 157, 108], 2: [202, 122, 84] } },
  { version: 9, capacities: { 1: [552, 335, 230], 0: [432, 262, 180], 3: [312, 189, 130], 2: [235, 143, 98] } },
  { version: 10, capacities: { 1: [652, 395, 271], 0: [513, 311, 213], 3: [364, 221, 151], 2: [288, 174, 119] } },
  { version: 11, capacities: { 1: [772, 468, 321], 0: [604, 366, 251], 3: [427, 259, 177], 2: [331, 200, 137] } },
  { version: 12, capacities: { 1: [883, 535, 367], 0: [691, 419, 287], 3: [489, 296, 203], 2: [374, 227, 155] } },
  { version: 13, capacities: { 1: [1022, 619, 425], 0: [796, 483, 331], 3: [580, 352, 241], 2: [427, 259, 177] } },
  { version: 14, capacities: { 1: [1101, 667, 458], 0: [871, 528, 362], 3: [621, 376, 258], 2: [468, 283, 194] } },
  { version: 15, capacities: { 1: [1250, 758, 520], 0: [991, 600, 412], 3: [703, 426, 292], 2: [530, 321, 220] } },
  { version: 16, capacities: { 1: [1408, 854, 586], 0: [1082, 656, 450], 3: [775, 470, 322], 2: [602, 365, 250] } },
  { version: 17, capacities: { 1: [1548, 938, 644], 0: [1212, 734, 504], 3: [876, 531, 364], 2: [674, 408, 280] } },
  { version: 18, capacities: { 1: [1725, 1046, 718], 0: [1346, 816, 560], 3: [948, 574, 394], 2: [746, 452, 310] } },
  { version: 19, capacities: { 1: [1903, 1153, 792], 0: [1500, 909, 624], 3: [1063, 644, 442], 2: [813, 493, 338] } },
  { version: 20, capacities: { 1: [2061, 1249, 858], 0: [1600, 970, 666], 3: [1159, 702, 482], 2: [919, 557, 382] } },
  { version: 21, capacities: { 1: [2232, 1352, 929], 0: [1708, 1035, 711], 3: [1224, 742, 509], 2: [969, 587, 403] } },
  { version: 22, capacities: { 1: [2409, 1460, 1003], 0: [1872, 1134, 779], 3: [1358, 823, 565], 2: [1056, 640, 439] } },
  { version: 23, capacities: { 1: [2620, 1588, 1091], 0: [2059, 1248, 857], 3: [1468, 890, 611], 2: [1108, 672, 461] } },
  { version: 24, capacities: { 1: [2812, 1704, 1171], 0: [2188, 1326, 911], 3: [1588, 963, 661], 2: [1228, 744, 511] } },
  { version: 25, capacities: { 1: [3057, 1853, 1273], 0: [2395, 1451, 997], 3: [1718, 1041, 715], 2: [1286, 779, 535] } },
  { version: 26, capacities: { 1: [3283, 1990, 1367], 0: [2544, 1542, 1059], 3: [1804, 1094, 751], 2: [1425, 864, 593] } },
  { version: 27, capacities: { 1: [3517, 2132, 1465], 0: [2701, 1637, 1125], 3: [1933, 1172, 805], 2: [1501, 910, 625] } },
  { version: 28, capacities: { 1: [3669, 2223, 1528], 0: [2857, 1732, 1190], 3: [2085, 1263, 868], 2: [1581, 958, 658] } },
  { version: 29, capacities: { 1: [3909, 2369, 1628], 0: [3035, 1839, 1264], 3: [2181, 1322, 908], 2: [1677, 1016, 698] } },
  { version: 30, capacities: { 1: [4158, 2520, 1732], 0: [3289, 1994, 1370], 3: [2358, 1429, 982], 2: [1782, 1080, 742] } },
  { version: 31, capacities: { 1: [4417, 2677, 1840], 0: [3486, 2113, 1452], 3: [2473, 1499, 1030], 2: [1897, 1150, 790] } },
  { version: 32, capacities: { 1: [4686, 2840, 1952], 0: [3693, 2238, 1538], 3: [2670, 1618, 1112], 2: [2022, 1226, 842] } },
  { version: 33, capacities: { 1: [4965, 3009, 2068], 0: [3909, 2369, 1628], 3: [2805, 1700, 1168], 2: [2157, 1307, 898] } },
  { version: 34, capacities: { 1: [5253, 3183, 2188], 0: [4134, 2506, 1722], 3: [2949, 1787, 1228], 2: [2301, 1394, 958] } },
  { version: 35, capacities: { 1: [5529, 3351, 2303], 0: [4343, 2632, 1809], 3: [3081, 1867, 1283], 2: [2361, 1431, 983] } },
  { version: 36, capacities: { 1: [5836, 3537, 2431], 0: [4588, 2780, 1911], 3: [3244, 1966, 1351], 2: [2524, 1530, 1051] } },
  { version: 37, capacities: { 1: [6153, 3729, 2563], 0: [4775, 2894, 1989], 3: [3417, 2071, 1423], 2: [2625, 1591, 1093] } },
  { version: 38, capacities: { 1: [6479, 3927, 2699], 0: [5039, 3054, 2099], 3: [3599, 2181, 1499], 2: [2735, 1658, 1139] } },
  { version: 39, capacities: { 1: [6743, 4087, 2809], 0: [5313, 3220, 2213], 3: [3791, 2298, 1579], 2: [2927, 1774, 1219] } },
  { version: 40, capacities: { 1: [7089, 4296, 2953], 0: [5596, 3391, 2331], 3: [3993, 2420, 1663], 2: [3057, 1852, 1273] } },  
];

export function getMinimumQRVersion(text: string, errorLevel: ErrorCorrectionType): number {
  const mode = getQREncodeMode(text);

  const allCapacities = [...QRCapacities];

  for (const { version, capacities } of allCapacities) {
    if (text.length <= capacities[errorLevel][mode]) {
      return version;
    }
  }

  return 0; // Texto não cabe em nenhuma versão de QR code
}